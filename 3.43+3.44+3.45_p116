#include <iostream>
#include <string>
#include <vector>
#include <cctype>
using std::vector;
using std::string;
using std::cout;
using std::cin;
using std::endl;

int main()	
{
	int ia[3][4] = {
		{0, 1, 2, 3},
		{4, 5, 6, 7},
		{8, 9, 10, 11}
	};

	//版本1：使用范围for
	cout << "版本1的输出：" << endl;
	for (int (&p1)[4] : ia)//除了最内层，外层的循环变量都应该是引用，而不是指针，因为内层不能在指针中试图遍历
	{
		for (int p2 : p1)
		{
			cout << p2 << '\t';
		}
		cout << endl;
	}

	//版本2：使用普通for和下标
	cout << "版本2的输出：" << endl;
	for (int i = 0; i < 3; ++i)
	{
		for (int j = 0; j < 4; ++j)
		{
			cout << ia[i][j] << '\t';
		}
		cout << endl;
	}

	//版本3：使用普通for和指针
	cout << "版本3的输出：" << endl;
	for (int(*p1)[4] = ia; p1 != ia + 3; ++p1)//内层循环变量使用自增运算，所以外层可以使用指针循环变量
	{
		for (int *p2 = *p1; p2 != *p1 + 4; ++p2)
		{
			cout << *p2 << '\t';
		}
		cout << endl;
	}

	//版本4：使用类型别名
	cout << "版本4的输出：" << endl;
	using int_type = int[4];
	//指针的基本数据类型应该与指向的对象一致，所以类型别名应该是维度为4的数组，而不应该是指向数组的指针
	for (int_type *p1 = ia; p1 != ia + 3; ++p1)
	{
		for (int *p2 = *p1; p2 != *p1 + 4; ++p2)
		{
			cout << *p2 << '\t';
		}
		cout << endl;
	}

	//版本5：使用auto
	cout << "版本5的输出：" << endl;
	//同版本1，内层范围for，外层注意用引用而不是指针，auto默认转化成指针，所以显式定义为引用
	for (auto &p1 : ia)
	{
		for (auto p2 : p1)
		{
			cout << p2 << '\t';
		}
		cout << endl;
	}

	system("pause");
	return 0;
}
