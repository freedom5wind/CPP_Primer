第一章：开始

1.while(std:cin >> value)读输入流，直到文件结束符(end-of-file)，在Windows中是Ctrl+Z+Enter。

第二章：变量和基本类型

1.当第一次使用变量时，再定义。
2.作用域操作符“::”用来说明想使用的作用域，当::左面为空时，即使用全局作用域。
3.复合类型-引用和指针
复合类型：
声明语句应该由一个基本数据类型，和紧随其后的一个声明符列表组成。其中声明符一般指变量名，还有&、*等。*和&一次只修饰一个变量，即int* p和int *p的含义是一样的。

引用：
（1）用‘&’定义。
      例：int i,&j = i;//定义int变量i，定义int引用j绑定i
（2）定义的同时必须与一个对象绑定即初始化
（3）一般来说，引用与绑定的对象类型要相同。
    第一种例外：初始化常量引用时，允许用任意表达式作为初始值，基本数据类型可以不一样，只要该表达式的结果能转换成引用的类型即可。这时编译器用一个与引用同类型的临时量对象先暂存const对象并转换类型，然后将临时量赋给常量引用。
    常量引用，即对const的引用，引用被const修饰，被引用的对象不一定要有const修饰，常量引用不能改变其引用的变量的值，与引用对象本身是否是常量无关。
      int i;
      const int j;
      double k;
      const int &r1 = i;//非常量变量也可以用常量引用
      const int &r2 = j;//常量变量，只能用常量引用
      const int $r3 = k;//引用与被引用对象类型不同：const int temp = k; const int &r3 = temp;
（4）无法定义引用的引用，将会绑定到同一个对象
（5）引用本身不是一个对象，一旦定义了一个引用，就无法令其再绑定到另外的对象
      
指针：
（1）用‘*’定义。
（2）与内置类型相似，可以反复拷贝，无需在定义时赋初值。
（3）获取指针存放的地址，用取地址符‘&’
（4）访问指针指向的对象，用解引用符‘*’
（5）空指针，建议赋值为nullptr
（6）一般来说，指针和其指向的对象的类型应该一致。
    第一种例外：允许一个指向常量的指针指向一个非常量对象，但基本数据类型仍要一致。因为指针本身也是一个对象，修饰指针的const只能限定指针指向的地址不能修改，而被指向对象用const修饰，才能保证该对象不被修改。
      int i = 3;
      int *const p = &i;//i可以修改，p不能修改。另外注意const的位置，强调修饰的是指针本身
      const int j = 3;
      int *const p2 = &j;//常量只能用常量指针来指向，这时p2和j都不能修改。
      例：给指针赋值
      初始化时：
        int j = 1;
        int *p1 = &j;//将地址赋值给指针
        int *p2 = p1;//将指针的值，还是地址，赋给新的指针
      初始化后：
        int i = 3;
        int *p1, *p2;
        p1 = &i;//将i的地址赋给p1指针
        *p2 = i;//将i的值赋给p2指向的变量，但此处会报错，因为p2未初始化，没有确定指向的变量
 
多个修饰符连写：
(1）指向指针的指针：
      int i = 1;
      int *p = &i;
      int **p2 = &p;
(2) 指向指针的引用：（引用不是对象，所以不能定义指向引用的指针）
      int i = 2;
      int *p = &i;
      int *&r = p;//之后使用r就是使用p
注：面对比较复杂的指针或引用的声明语句时，将“基本数据类型”+“声明符列表”从右向左读有助于弄清含义。

p57顶层const，完成前面的练习
